#!/usr/bin/env python
# coding: utf-8

# In[34]:


# Программирование на языке высокого уровня (Python).
# Задание №4.3.2.
#
# Выполнил: Таран Мария
# Группа: ПИН-б-о-21-1
# E-mail: taranma26agmail.com@yandex.ruimport time

class Пицца:
    """Класс Пицца содержит общие атрибуты для пиццы.

    Дочерние классы будут их конкретизировать.
    """

    def __init__(self):
        """Конструктор класса.

        Инициализирует атрибуты пиццы (значения по умолчанию).
        """
        self.название = "Заготовка"
        self.тесто = "тонкое"  # тонкое или пышное
        self.соус = "кечтуп"   # или другой
        self.начинка = []      # список начинок (по умолчанию - нет)

        self.цена = 0

    def __str__(self):
        """Вернуть информацию о пицце: название, тесто, соус, начинка.

        Формат вывода:

        Пицца: Пепперони | Цена: 350.00 р.
        Тесто: тонкое Соус: томатный
        Начинка: пепперони, сыр моцарелла
        """
        return (
            f"Пицца: {self.название} | Цена: {self.цена:.2f} р.\n"
            f"Тесто: {self.тесто} Соус: {self.соус}\n"
            f"Начинка: {', '.join(self.начинка)}"
        )

    def подготовить(self):
        """Сообщить о процессе подготовки."""
        print(f"Начинаю готовить пиццу {self.название}")
        print(f"  - замешиваю {self.тесто} тесто...")
        print(f"  - добавляю соус: {self.соус}...")
        print(f"  - и, конечно: {', '.join(self.начинка)}...")

    def испечь(self):
        """Сообщить о процессе запекания пиццы."""
        print("Выпекаю пиццу... Готово!")

    def нарезать(self):
        """Сообщить о процессе нарезки."""
        print("Нарезаю на аппетитные кусочки...")

    def упаковать(self):
        """Сообщить о процессе упаковки."""
        print("Упаковываю в фирменную упаковку и готово!")



# In[35]:


class ПиццаПепперони(Пицца):
    """Класс ПиццаПепперони дополняет класс Пицца."""

    def __init__(self):
        super().__init__()
        self.название = "Пепперони"
        self.тесто = "тонкое"
        self.соус = "томатный"
        self.начинка = ["пепперони", "сыр моцарелла"]
        self.цена = 350.00


class ПиццаБарбекю(Пицца):
    """Класс ПиццаБарбекю дополняет класс Пицца."""

    def __init__(self):
        super().__init__()
        self.название = "Барбекю"
        self.тесто = "тонкое"
        self.соус = "барбекю"
        self.начинка = ["бекон", "ветчина", "зелень", "сыр моцарелла"]
        self.цена = 450.00


class ПиццаДарыМоря(Пицца):
    """Класс ПиццаДарыМоря дополняет класс Пицца."""

    def __init__(self):
        super().__init__()
        self.название = "Дары моря"
        self.тесто = "пышное"
        self.соус = "тар-тар"
        self.начинка = ["кальмары", "креветки", "мидии", "сыр моцарелла"]
        self.цена = 550.00



# In[36]:


class Заказ:
    """Класс Заказ представляет собой заказ клиента."""

    def __init__(self):
        """Конструктор класса.

        self.пиццы: список заказанных пицц;
        self.статус: текущий статус заказа (по умолчанию - "новый").
        """
        self.пиццы = []
        self.статус = "новый"

    def добавить_пиццу(self, пицца):
        """Добавить пиццу к заказу.

        Аргументы:
          - пицца (Пицца): объект класса Пицца, который нужно добавить к заказу.

        Если заказ уже подтвержден, то выбросить исключение ValueError.
        """
        if self.статус == "подтвержден":
            raise ValueError("Нельзя добавить пиццу к подтвержденному заказу.")
        self.пиццы.append(пицца)

    def подтвердить(self):
        """Подтвердить заказ.

        Устанавливает статус заказа в "подтвержден".
        """
        self.статус = "подтвержден"

    def отменить(self):
        """Отменить заказ.

        Устанавливает статус заказа в "отменен".
        """
        self.статус = "отменен"

    def рассчитать_стоимость(self):
        """Рассчитать общую стоимость заказа."""
        стоимость = sum(пицца.цена for пицца in self.пиццы)
        return стоимость

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:
        Заказ: {статус}
        Пиццы:
          1. {название} - {цена} р.
          2. {название} - {цена} р.
          ...
        Общая стоимость: {общая_стоимость} р.
        """
        строка_заказа = f"Заказ: {self.статус}\nПиццы:\n"
        for номер, пицца in enumerate(self.пиццы, 1):
            строка_заказа += f"{номер}. {пицца.название} - {пицца.цена:.2f} р.\n"
        строка_заказа += f"Общая стоимость: {self.рассчитать_стоимость():.2f} р."
        return строка_заказа


# In[37]:


class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ = "Название компании"
    ВЕРСИЯ_ПРОГРАММЫ = "Версия программы"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: объект класса Заказ для управления заказом;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        # Доступные пиццы
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:
        Название компании Версия программы
        """
        return f"{self.КОМПАНИЯ} {self.ВЕРСИЯ_ПРОГРАММЫ}"

    def показать_меню(self):
        """Показать меню.

        Показать меню следует только при наличии флага self.отображать_меню
        self.отображать_меню устанавливается в False после вывода меню.

        Формат вывода:
        Название компании Версия программы
        Добро пожаловать!

        Меню:
        1. Пицца: Пепперони | Цена: 350.00 р.
           Тесто: тонкое Соус: томатный
           Начинка: пепперони, сыр моцарелла
        2. Пицца: Барбекю | Цена: 450.00 р.
           Тесто: тонкое Соус: барбекю
           Начинка: бекон, ветчина, зелень, сыр моцарелла
        3. Пицца: Дары моря | Цена: 550.00 р.
           Тесто: пышное Соус: тар-тар
           Начинка: кальмары, креветки, мидии, сыр моцарелла
        Для выбора укажите цифру через <ENTER>.
        Для отмены заказа введите -1
        Для подтверждения заказа введите 0
        """
        if not self.отображать_меню:
            return

        print(self)
        print("Добро пожаловать!\n")
        print("Меню:")
        for номер, пицца in enumerate(self.меню, 1):
            print(f"{номер}. {пицца}")
        print("Для выбора укажите цифру через <ENTER>.")
        print("Для отмены заказа введите -1")
        print("Для подтверждения заказа введите 0")

    def обработать_команду(self, пункт_меню):
        """Обработать действие пользователя.

        Аргументы:
          - пункт_меню (str): выбор пользователя.

        Возможные значения "пункт_меню":
          - -1: отменить заказ;
          -  0: подтвердить заказ; при этом осуществляется
                выставление счета, оплата, а также выполняется заказ;
                после заказ удаляется (= None)
          - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                               если заказ не создан, его нужно создать.
          - иначе: сообщить о невозможности обработать команду.

        Каждое действие подтверждается выводом на экран, например:
        1
        Пицца Пепперони добавлена!
        2
        Пицца Барбекю добавлена!
        0
        Заказ подтвержен.
        """

        try:
            пункт_меню = int(пункт_меню)
            if пункт_меню == self.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                if self.заказ:
                    print("Заказ отменен.")
                    self.заказ.отменить()
                    self.заказ = None
                else:
                    print("Заказ не создан.")
            elif пункт_меню == self.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                if self.заказ:
                    print("Заказ подтвержен.")
                    self.заказ.подтвердить()
                    self.принять_оплату()
                    self.заказ = None
                else:
                    print("Заказ не создан.")
            elif 1 <= пункт_меню <= len(self.меню):
                if not self.заказ:
                    self.заказ = Заказ()
                выбранная_пицца = self.меню[пункт_меню - 1]
                self.заказ.добавить_пиццу(выбранная_пицца)
                print(f"Пицца {выбранная_пицца.название} добавлена в заказ!")
            else:
                raise ValueError
        except ValueError:
            print("Невозможно обработать команду. Пожалуйста, выберите корректный пункт меню.")

    def принять_оплату(self):
        """Принять оплату.

        Производится запрос суммы оплаты у пользователя, и выводится результат.
        Если оплата успешна, заказ подтверждается и готовится к выполнению,
        иначе заказ отменяется.

        В случае ошибки ValueError при вводе суммы пользователю выводится сообщение,
        что оплата не удалась, заказ будет отменен.
        """

        try:
            оплата = float(input("Введите сумму оплаты: "))
            сдача = self.рассчитать_сдачу(оплата)
            print("Оплата успешно принята. Спасибо за заказ!")
        except ValueError:
            print("Оплата не удалась. Заказ будет отменен.")
            self.заказ.отменить()
            self.заказ = None

    def рассчитать_сдачу(self, оплата):
        """Рассчитать сдачу.

        Аргументы:
          - оплата (float): сумма оплаты.

        Возвращает сдачу (float), если оплата больше стоимости заказа,
        иначе выводит сообщение и возвращает None.
        """

        стоимость_заказа = self.заказ.рассчитать_стоимость()
        сдача = оплата - стоимость_заказа

        if сдача >= 0:
            print(f"Ваша сдача: {сдача:.2f} р.")
            return сдача
        else:
            print("Недостаточно средств. Заказ не создан.")
            self.заказ.отменить()
            self.заказ = None
            return None


# In[42]:


def main():
    терминал1 = Терминал()

    print(терминал1)

    терминал1.показать_меню()
    терминал1.обработать_команду(1)

    терминал1.показать_меню()
    терминал1.обработать_команду(0)

if __name__ == "__main__":
    main()


# In[ ]:




